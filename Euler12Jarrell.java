// Problem #12
/*The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
*/

import java.util.*;
public class Euler12Jarrell
{
	public static void main(String[] args)
	{ 
		ArrayList<Integer> triangleNumbers = new ArrayList<Integer>();
		triangleNumbers.add(1);
		int sum = 1; 
		for (int i = 2; true; i++)
		{
			sum += i;
			triangleNumbers.add(sum);
			if (getDivisorNum(triangleNumbers) > 500)
			{
				System.out.print(triangleNumbers.get(triangleNumbers.size()-1)); 
				break;
			}
		}
	}
	
	public static int getDivisorNum(ArrayList<Integer> x)
	{
		int count = 0;
		int r = x.get(x.size()-1);
		for (int i = 1; i * i <= r; i++) // the condition i * i <= r drastically speeds up method execution. 
		{
			if (r % i == 0)
			{
				count += 2;
			}
		}
		return count; 
	}
}